//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiFilling.DataServiceRef {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DataServiceRef.IAShEventService", CallbackContract=typeof(MultiFilling.DataServiceRef.IAShEventServiceCallback))]
    public interface IAShEventService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/RegisterForUpdates")]
        void RegisterForUpdates(System.Guid clientId, string[] categories);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/UpdateProperty")]
        void UpdateProperty(System.Guid clientId, string category, string pointname, string propname, string value, bool nocash);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/Disconnect")]
        void Disconnect(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/SubscribeValues")]
        void SubscribeValues(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/GetFile")]
        void GetFile(System.Guid clientId, string filename, System.Guid fileId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/SendCommand")]
        void SendCommand(System.Guid clientId, string address, int code, ushort[] hregs);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAShEventServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/PropertyUpdated")]
        void PropertyUpdated(System.DateTime servertime, string category, string pointname, string propname, string value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAShEventService/FileBlockReceived")]
        void FileBlockReceived(System.Guid fileId, long length, int block, int size, byte[] buffer, byte[] md5);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAShEventServiceChannel : MultiFilling.DataServiceRef.IAShEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AShEventServiceClient : System.ServiceModel.DuplexClientBase<MultiFilling.DataServiceRef.IAShEventService>, MultiFilling.DataServiceRef.IAShEventService {
        
        public AShEventServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public AShEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public AShEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AShEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public AShEventServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterForUpdates(System.Guid clientId, string[] categories) {
            base.Channel.RegisterForUpdates(clientId, categories);
        }
        
        public void UpdateProperty(System.Guid clientId, string category, string pointname, string propname, string value, bool nocash) {
            base.Channel.UpdateProperty(clientId, category, pointname, propname, value, nocash);
        }
        
        public void Disconnect(System.Guid clientId) {
            base.Channel.Disconnect(clientId);
        }
        
        public void SubscribeValues(System.Guid clientId) {
            base.Channel.SubscribeValues(clientId);
        }
        
        public void GetFile(System.Guid clientId, string filename, System.Guid fileId) {
            base.Channel.GetFile(clientId, filename, fileId);
        }
        
        public void SendCommand(System.Guid clientId, string address, int code, ushort[] hregs) {
            base.Channel.SendCommand(clientId, address, code, hregs);
        }
    }
}
